package io.github.qe7.features.impl.modules.impl.exploit;

import io.github.qe7.events.impl.player.LivingUpdateEvent;
import io.github.qe7.features.impl.modules.api.Module;
import io.github.qe7.features.impl.modules.api.enums.ModuleCategory;
import io.github.qe7.features.impl.modules.api.settings.impl.EnumSetting;
import io.github.qe7.features.impl.modules.api.settings.impl.interfaces.IEnumSetting;
import io.github.qe7.utils.local.PacketUtil;
import me.zero.alpine.listener.Listener;
import me.zero.alpine.listener.Subscribe;
import net.minecraft.client.Minecraft;
import net.minecraft.src.EntityPlayerSP;
import net.minecraft.src.ItemFood;
import net.minecraft.src.ItemPotion;
import net.minecraft.src.Packet10Flying;

public class FastUseModule extends Module {

    private final EnumSetting<Mode> mode = new EnumSetting<>("Mode", Mode.INSTANT);

    public FastUseModule() {
        super("Fast Use", "Allows you to use consumables faster", ModuleCategory.EXPLOIT);
    }

    @Subscribe
    public final Listener<LivingUpdateEvent> updateEventListener = new Listener<>(LivingUpdateEvent.class, event -> {
        if (Minecraft.getMinecraft().thePlayer == null) return;

        final EntityPlayerSP playerSP = Minecraft.getMinecraft().thePlayer;

        if (!playerSP.isUsingItem()) return;
        if (playerSP.inventory.getCurrentItem() == null) return;
        if (!(
                playerSP.inventory.getCurrentItem().getItem() instanceof ItemFood ||
                        playerSP.inventory.getCurrentItem().getItem() instanceof ItemPotion
        )) return;

        switch (mode.getValue()) {
            case INSTANT:
                for (int i = 0; i < 33; i++) {
                    PacketUtil.sendPacket(new Packet10Flying(true));
                }
                break;
            case ALWAYS:
                PacketUtil.sendPacket(new Packet10Flying(true));
                break;
            case NCP:
                // if item use is 16 send 17 packets
                if (playerSP.getItemInUseCount() == 16 && playerSP.onGround) {
                    for (int i = 0; i < 17; i++) {
                        PacketUtil.sendPacket(new Packet10Flying(true));
                    }
                }
                break;
        }
    });

    private enum Mode implements IEnumSetting {
        INSTANT("Instant"),
        ALWAYS("Always"),
        NCP("NCP");

        private final String name;

        Mode(String name) {
            this.name = name;
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public Enum<?> getEnum(String name) {
            return Mode.valueOf(name);
        }
    }
}
